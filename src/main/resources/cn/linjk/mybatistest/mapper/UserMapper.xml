<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.linjk.mybatistest.mapper.UserMapper">
    <resultMap id="userMap" type="cn.linjk.mybatistest.domain.User">
        <id property="userId" column="user_id"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="lastLogin" column="last_login"/>
        <result property="remark" column="remark"/>
    </resultMap>

    <select id="selectById" resultMap="userMap">
        SELECT * FROM t_user WHERE user_id = #{id}
    </select>

    <select id="selectByUser" resultType="User">
        SELECT * FROM t_user
        <where>
            <if test="name != null and name != ''">
                <!--
                    value部分为OGNL表达式，Mybatis常用的OGNL表达式如下：
                    1、 e1 or e2
                    2、 e1 and e2
                    3、 e1==e2 或 e1 eq e2
                    4、 e1!=e2 或 e1 neq e2
                    5、 小于： e1 lt e2
                    6、 小于等于： e1 lte e2
                    7、 !e 或 not e
                    8、 e.method(args): 调用对象方法
                    9、 e.property: 对象属性值
                    10、e1[e2]: 按索引取值(List、数组和Map)
                    11、@class@method(args)：调用类的静态方法
                    12、@class@field：调用类的静态字段值
                -->
                <bind name="nameLike" value="'%' + name + '%'"/>
                AND name LIKE #{nameLike}
            </if>
            <if test="remark != null and remark != ''">
                <bind name="remarkLike" value="'%' + remark + '%'"/>
                AND remark LIKE #{remarkLike}
            </if>
        </where>
    </select>

    <!--
        collection: 值为要迭代循环的属性名
        item      : 变量名，值为从迭代对象中取出的每一个值
        index     : 索引的属性名，在集合数组情况下值为当前索引值，在迭代循环的对象是Map类型时，这个值为Map的key(键值)
        open      : 整个循环内容开头的字符串
        close     : 整个循环内容结尾的字符串
        separator : 每次循环的分隔符
    -->
    <select id="selectByIdList" resultType="User">
      SELECT * FROM t_user WHERE user_id in
      <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
          #{id}
      </foreach>
    </select>

    <select id="selectAll" resultMap="userMap">
        SELECT * FROM t_user
    </select>

    <select id="selectRolesbyUserId" resultType="cn.linjk.mybatistest.domain.Role">
      select r.role_id, r.name, u.name as "user.name" from t_USER u
      INNER join t_user_role ur on u.user_id = ur.user_id
      INNER JOIN t_role r on ur.role_id = r.role_id;
    </select>

    <insert id="insert">
        INSERT INTO t_user (user_id, name, password, last_login, remark)
        VALUES (#{userId}, #{name}, #{password}, #{lastLogin, jdbcType=TIMESTAMP}, #{remark})
    </insert>

    <insert id="insertList">
        INSERT INTO t_user (user_id, name, password) VALUES
        <foreach collection="list" item="user" separator=",">
            (
              #{user.userId}, #{user.name}, #{user.password}
            )
        </foreach>
    </insert>

    <update id="updateByUserId">
        UPDATE t_user set name = #{name}, password = #{password} WHERE user_id = #{userId}
    </update>

    <delete id="deleteByUserId">
        DELETE FROM t_user WHERE user_id = #{userId}
    </delete>
</mapper>